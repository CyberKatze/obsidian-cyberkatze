/*
THIS IS A GENERATED/BUNDLED FILE BY ROLLUP
if you want to view the source visit the plugins github repository
*/

'use strict';

var obsidian = require('obsidian');
var rangeset = require('@codemirror/rangeset');
var view = require('@codemirror/view');

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

const APPLE_MUSIC_LINK = new RegExp(/https:\/\/(?:embed\.)?music\.apple\.com\/.+\/(?:playlist|album)\/.+\/.+/);
const APPLE_MUSIC_SONG_LINK = new RegExp(/https:\/\/(?:embed\.)?music\.apple\.com\/.+\/(?:playlist|album)\/.+\/.+\?i=\d+/);
class AppleMusicEmbed {
    constructor() {
        this.name = "Apple Music";
        this.enabledKey = "replaceAppleMusicLinks";
        this.regex = APPLE_MUSIC_LINK;
    }
    createEmbed(link, container) {
        const isSong = APPLE_MUSIC_SONG_LINK.test(link);
        const iframe = document.createElement("iframe");
        iframe.src = link.replace("https://music.apple", "https://embed.music.apple");
        iframe.setAttr("frameborder", "0");
        iframe.allow = "autoplay *; encrypted-media *; fullscreen *";
        iframe.setAttr("sandbox", "allow-forms allow-popups allow-same-origin allow-scripts allow-top-navigation-by-user-activation");
        iframe.height = isSong ? "150" : "450";
        iframe.style.width = "100%";
        iframe.style.overflow = "hidden";
        iframe.style.background = "transparent";
        container.classList.add("apple-music");
        container.appendChild(iframe);
        return container;
    }
}

const APPLE_PODCAST_LINK = new RegExp(/https:\/\/podcasts.apple.com\/(?<locale>[a-z-]+)\/podcast\/(?<content>.*\/id[0-9]+(?:\?i=[0-9]+)?)/);
class ApplePodcastsEmbed {
    constructor() {
        this.name = "Apple Podcasts";
        this.enabledKey = "replaceApplePodcastsLinks";
        this.regex = APPLE_PODCAST_LINK;
    }
    createEmbed(link, container, settings, currentTheme) {
        const iframe = document.createElement("iframe");
        const matches = link.match(APPLE_PODCAST_LINK);
        const locale = matches.groups.locale;
        const content = matches.groups.content;
        const isEpisode = content.contains("?i=");
        const src = `https://embed.podcasts.apple.com/${locale}/podcast/${content}${isEpisode ? "&" : "?"}theme=${currentTheme}`;
        iframe.src = src;
        iframe.setAttribute("frameborder", "0");
        iframe.setAttribute("sandbox", "allow-forms allow-popups allow-same-origin allow-scripts allow-top-navigation-by-user-activation");
        iframe.allow = "autoplay *; encrypted-media *;";
        iframe.height = isEpisode ? "175px" : "450px";
        container.appendChild(iframe);
        container.classList.add("apple-podcasts");
        return container;
    }
    updateTheme(theme, settings) {
        const podcastEmbeds = document.querySelectorAll(".embed-container.apple-podcasts iframe");
        podcastEmbeds.forEach((embed) => {
            let src = embed.src;
            if (theme === "dark") {
                src = src.replace("theme=light", "theme=dark");
            }
            else {
                src = src.replace("theme=dark", "theme=light");
            }
            embed.src = src;
        });
    }
}

const APPLE_TV_LINK = new RegExp(/https:\/\/tv.apple.com\/(?<locale>[a-z-]+)\/(?<type>episode|show|movie)\/(?<content>\S*)/);
class AppleTVEmbed {
    constructor() {
        this.name = "Apple TV+";
        this.enabledKey = "replaceAppleTVLinks";
        this.regex = APPLE_TV_LINK;
    }
    createEmbed(link, container, settings, currentTheme) {
        const wrapper = document.createElement("div");
        wrapper.classList.add("video-wrapper");
        const iframe = document.createElement("iframe");
        const fakeLink = document.createElement("a");
        fakeLink.href = link;
        fakeLink.classList.add("fake-link");
        const matches = link.match(APPLE_TV_LINK);
        const locale = matches.groups.locale;
        const type = matches.groups.type;
        const content = matches.groups.content;
        const src = `https://embed.tv.apple.com/${locale}/${type}/${content}`;
        iframe.src = src;
        iframe.setAttribute("frameborder", "0");
        iframe.setAttribute("sandbox", "allow-forms allow-popups allow-same-origin allow-scripts allow-top-navigation-by-user-activation");
        iframe.allow = "autoplay *; encrypted-media *;";
        wrapper.appendChild(iframe);
        wrapper.appendChild(fakeLink);
        container.appendChild(wrapper);
        container.classList.add("apple-tv");
        return container;
    }
}

const CODEPEN_LINK = new RegExp(/https:\/\/codepen\.io\/(\w+)\/(?:pen)\/(\w+)/);
class CodepenEmbed {
    constructor() {
        this.name = "CodePen";
        this.enabledKey = "replaceCodepenLinks";
        this.regex = CODEPEN_LINK;
    }
    createEmbed(link, container, settings) {
        this._ensureCodepenLoaded();
        const user = link.match(CODEPEN_LINK)[1];
        const slug = link.match(CODEPEN_LINK)[2];
        const defaultTabs = [
            settings.codepenDefaultTab,
            settings.codepenShowResult ? "result" : false,
        ].filter(Boolean);
        container.classList.add("codepen");
        container.dataset["themeId"] = settings.codepenTheme;
        container.dataset["height"] = "300";
        container.dataset["defaultTab"] = defaultTabs.join(",");
        container.dataset["user"] = user;
        container.dataset["slugHash"] = slug;
        if (settings.codepenClickToLoad) {
            container.dataset["preview"] = "true";
        }
        if (settings.codepenEditable) {
            container.dataset["editable"] = "true";
        }
        container.classList.add("codepen");
        return container;
    }
    afterAllEmbeds() {
        setTimeout(() => {
            var _a;
            (_a = window.__CPEmbed) === null || _a === void 0 ? void 0 : _a.call(window, ".codepen");
        });
    }
    updateTheme(theme, settings) {
        if (settings.codepenTheme !== "auto")
            return;
        const codepenEmbeds = document.querySelectorAll(".cp_embed_wrapper iframe");
        codepenEmbeds.forEach((embed) => {
            let src = embed.src;
            if (theme === "dark") {
                src = src.replace("theme-id=light", "theme=dark");
            }
            else {
                src = src.replace("theme-id=dark", "theme=light");
            }
            embed.src = src;
        });
    }
    _ensureCodepenLoaded() {
        (function (d, s, id) {
            var js, fjs = d.getElementsByTagName(s)[0];
            if (d.getElementById(id))
                return;
            js = d.createElement(s);
            js.id = id;
            js.src = "https://cpwebassets.codepen.io/assets/embed/ei.js";
            js.async = true;
            fjs.parentNode.insertBefore(js, fjs);
        })(document, "script", "ei-codepen");
    }
    createAdditionalSettings(containerEl, settings, saveSettings) {
        const themeSetting = new obsidian.Setting(containerEl)
            .setName("Theme")
            .addDropdown((dropdown) => {
            dropdown.addOptions({
                auto: "Automatic",
                dark: "Dark",
                light: "Light",
            })
                .setValue(settings.codepenTheme)
                .onChange((value) => __awaiter(this, void 0, void 0, function* () {
                yield saveSettings({ codepenTheme: value });
            }));
        });
        const defaultTabSetting = new obsidian.Setting(containerEl)
            .setName("Default tab")
            .addDropdown((dropdown) => {
            dropdown.addOptions({ html: "HTML", css: "CSS", js: "JS" })
                .setValue(settings.codepenDefaultTab)
                .onChange((value) => __awaiter(this, void 0, void 0, function* () {
                yield saveSettings({ codepenDefaultTab: value });
            }));
        });
        const showResultSetting = new obsidian.Setting(containerEl)
            .setName("Show result")
            .addToggle((toggle) => {
            toggle
                .setValue(settings.codepenShowResult)
                .onChange((value) => __awaiter(this, void 0, void 0, function* () {
                yield saveSettings({ codepenShowResult: value });
            }));
        });
        const clickToLoadSetting = new obsidian.Setting(containerEl)
            .setName("Click to load")
            .addToggle((toggle) => {
            toggle
                .setValue(settings.codepenClickToLoad)
                .onChange((value) => __awaiter(this, void 0, void 0, function* () {
                yield saveSettings({ codepenClickToLoad: value });
            }));
        });
        const editableSetting = new obsidian.Setting(containerEl)
            .setName("Codepen editable")
            .addToggle((toggle) => {
            toggle
                .setValue(settings.codepenEditable)
                .onChange((value) => __awaiter(this, void 0, void 0, function* () {
                yield saveSettings({ codepenEditable: value });
            }));
        });
        return [
            themeSetting,
            defaultTabSetting,
            showResultSetting,
            clickToLoadSetting,
            editableSetting,
        ];
    }
}

const FLAT_IO_LINK = new RegExp(/https:\/\/flat\.io\/(?:score|embed)\/.*/);
class FlatIOEmbed {
    constructor() {
        this.name = "Flat.io";
        this.enabledKey = "replaceFlatIOLinks";
        this.regex = FLAT_IO_LINK;
    }
    createEmbed(link, container) {
        const iframe = document.createElement("iframe");
        iframe.src = link.replace("/score/", "/embed/");
        iframe.setAttribute("frameborder", "0");
        iframe.allow = "fullscreen";
        container.appendChild(iframe);
        container.classList.add("flat_io");
        return container;
    }
}

const GITHUB_GIST = new RegExp(/https:\/\/gist.github\.com\/[a-zA-Z\d](?:[a-zA-z\d]|-(?=[a-zA-Z\d])){0,38}\/[a-z0-9]{32}/);
class GitHubGistEmbed {
    constructor() {
        this.name = "GitHub Gists";
        this.enabledKey = "replaceGitHubGistLinks";
        this.regex = GITHUB_GIST;
    }
    createEmbed(link, container) {
        const iframe = document.createElement("iframe");
        iframe.srcdoc = `<script src="${link}.js"></script>`;
        iframe.setAttribute("frameborder", "0");
        iframe.onload = () => {
            iframe.style.height =
                `${iframe.contentWindow.document.documentElement.scrollHeight}px`;
        };
        container.appendChild(iframe);
        container.classList.add("github_gist");
        return container;
    }
}

const INSTAGRAM_LINK = new RegExp(/https:\/\/www\.instagram\.com\/(?:p|tv|reel)\/(\w+)/);
class InstagramEmbed {
    constructor() {
        this.name = "Instagram";
        this.enabledKey = "replaceInstagramLinks";
        this.regex = INSTAGRAM_LINK;
    }
    createEmbed(link, container) {
        this._ensureInstagramLoaded();
        const blockquote = document.createElement("blockquote");
        blockquote.classList.add("instagram-media");
        blockquote.dataset["instgrmCaptioned"] = "";
        blockquote.dataset["instgrmPermalink"] = link;
        blockquote.dataset["instgrmVersion"] = "13";
        container.appendChild(blockquote);
        container.classList.add("instagram");
        return container;
    }
    afterAllEmbeds() {
        setTimeout(() => {
            var _a;
            (_a = window.instgrm) === null || _a === void 0 ? void 0 : _a.Embeds.process();
        });
    }
    _ensureInstagramLoaded() {
        (function (d, s, id) {
            var js, fjs = d.getElementsByTagName(s)[0];
            if (d.getElementById(id))
                return;
            js = d.createElement(s);
            js.id = id;
            js.src = "http://www.instagram.com/embed.js";
            fjs.parentNode.insertBefore(js, fjs);
        })(document, "script", "instagram-wjs");
    }
}

const NOTEFLIGHT_LINK = new RegExp(/https:\/\/(?:www\.)?noteflight\.com\/(?:(?:scores\/view)|embed)\/.*/g);
class NoteflightEmbed {
    constructor() {
        this.name = "Noteflight";
        this.enabledKey = "replaceNoteflightLinks";
        this.regex = NOTEFLIGHT_LINK;
    }
    createEmbed(link, container) {
        const iframe = document.createElement("iframe");
        iframe.src = link.replace("/scores/view/", "/embed/");
        iframe.setAttribute("frameborder", "0");
        iframe.allow = "fullscreen";
        container.appendChild(iframe);
        container.classList.add("noteflight");
        return container;
    }
}

const TWEET_LINK = new RegExp(/https:\/\/(?:mobile\.)?twitter\.com\/.+\/(\d+)/);
class TwitterEmbed {
    constructor() {
        this.name = "Twitter";
        this.enabledKey = "replaceTwitterLinks";
        this.regex = TWEET_LINK;
    }
    createEmbed(link, container, settings, currentTheme) {
        this._ensureTwitterLoaded();
        const tweetId = link.match(TWEET_LINK)[1];
        container.id = `TweetContainer${tweetId}`;
        const theme = settings.twitterTheme == "auto"
            ? currentTheme
            : settings.twitterTheme;
        window.twttr.ready(() => {
            window.twttr.widgets.createTweet(tweetId, container, {
                theme,
                dnt: true,
            });
        });
        container.classList.add("twitter");
        return container;
    }
    updateTheme(theme, settings) {
        if (settings.twitterTheme !== "auto") {
            return;
        }
        const twitterEmbeds = document.querySelectorAll(".embed-container .twitter-tweet.twitter-tweet-rendered iframe");
        console.log(twitterEmbeds);
        twitterEmbeds.forEach((embed) => {
            let src = embed.src;
            if (theme === "dark") {
                src = src.replace("theme=light", "theme=dark");
            }
            else {
                src = src.replace("theme=dark", "theme=light");
            }
            embed.src = src;
        });
    }
    _ensureTwitterLoaded() {
        window.twttr = (function (d, s, id) {
            var js, fjs = d.getElementsByTagName(s)[0], t = window.twttr || {};
            if (d.getElementById(id))
                return t;
            js = d.createElement(s);
            js.id = id;
            js.src = "https://platform.twitter.com/widgets.js";
            fjs.parentNode.insertBefore(js, fjs);
            t._e = [];
            t.ready = function (f) {
                t._e.push(f);
            };
            return t;
        })(document, "script", "twitter-wjs");
    }
    createAdditionalSettings(containerEl, settings, saveSettings) {
        const themeSetting = new obsidian.Setting(containerEl)
            .setName("Theme")
            .addDropdown((dropdown) => {
            dropdown.addOptions({
                auto: "Automatic",
                dark: "Dark",
                light: "Light",
            })
                .setValue(settings.twitterTheme)
                .onChange((value) => __awaiter(this, void 0, void 0, function* () {
                yield saveSettings({ twitterTheme: value });
            }));
        });
        return [themeSetting];
    }
}

const YOUTUBE_LINK = new RegExp(/http(?:s?):\/\/(?:www\.)?youtu(?:be\.com\/watch\?v=|\.be\/|be\.com\/embed\/)(?<id>[\w\-\_]*)((?:\?|&)(?:t|start)=(?<startTime>(?:\d+h)?(?:\d+m)?\d+s|\d+))?/);
class YouTubeEmbed {
    constructor() {
        this.name = "YouTube";
        this.enabledKey = "replaceYouTubeLinks";
        this.regex = YOUTUBE_LINK;
    }
    createEmbed(link, container) {
        const wrapper = document.createElement("div");
        wrapper.classList.add("video-wrapper");
        const iframe = document.createElement("iframe");
        const matches = link.match(YOUTUBE_LINK);
        const videoId = matches.groups.id;
        const startTime = this._normalizeStartTime(matches.groups.startTime);
        let src = `https://www.youtube.com/embed/${videoId}`;
        if (startTime) {
            src = `${src}?start=${startTime}`;
        }
        iframe.src = src;
        iframe.title = "YouTube video player";
        iframe.setAttribute("frameborder", "0");
        iframe.allow =
            "accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture;";
        iframe.setAttribute("sandbox", "allow-scripts allow-same-origin allow-presentation allow-popups");
        wrapper.appendChild(iframe);
        container.appendChild(wrapper);
        container.classList.add("youtube");
        return container;
    }
    _normalizeStartTime(startTime) {
        var _a, _b, _c;
        if (!startTime) {
            return;
        }
        if (!isNaN(Number(startTime))) {
            return startTime;
        }
        const matches = startTime.match(/(?<hours>\d+h)?(?<minutes>\d+m)?(?<seconds>\d+s)/);
        const hoursInSeconds = parseInt((_a = matches.groups.hours) !== null && _a !== void 0 ? _a : "0") * 60 * 60;
        const minutesInSeconds = parseInt((_b = matches.groups.minutes) !== null && _b !== void 0 ? _b : "0") * 60;
        const seconds = parseInt((_c = matches.groups.seconds) !== null && _c !== void 0 ? _c : "0");
        return `${hoursInSeconds + minutesInSeconds + seconds}`;
    }
}

const DEFAULT_SETTINGS = {
    replaceAppleMusicLinks: true,
    replaceApplePodcastsLinks: true,
    replaceAppleTVLinks: true,
    replaceCodepenLinks: true,
    replaceFlatIOLinks: true,
    replaceGitHubGistLinks: true,
    replaceInstagramLinks: true,
    replaceNoteflightLinks: true,
    replaceTwitterLinks: true,
    replaceYouTubeLinks: true,
    twitterTheme: "auto",
    codepenTheme: "auto",
    codepenDefaultTab: "html",
    codepenShowResult: true,
    codepenClickToLoad: false,
    codepenEditable: false,
    enableInLivePreview: false,
    centerEmbeds: false,
    keepLinksInPreview: false,
    embedPlacement: "above",
    disableAutomaticEmbeds: false,
};

class SimpleEmbedPluginSettingTab extends obsidian.PluginSettingTab {
    constructor(app, plugin) {
        super(app, plugin);
        this.embedSettings = {};
        this.plugin = plugin;
    }
    display() {
        let { containerEl } = this;
        containerEl.empty();
        containerEl.classList.add("simple-embeds-settings");
        containerEl.createEl("h3", { text: "Available Embed Sources" });
        containerEl.createEl("p", {
            cls: "setting-item-description",
        }, (el) => {
            el.innerHTML =
                "Disable to prevent <em>all</em> links from source ever being turned into embeds. To disable an individual link, add <code>|noembed</code> to the link text. For example, <code>[Some description|noembed](https://twitter.com/user/status/123)</code>";
        });
        // Toggles to enabled/disabled embed sources.
        this.plugin.embedSources.forEach((embedSource) => {
            new obsidian.Setting(containerEl).setName(embedSource.name).addToggle((toggle) => {
                toggle
                    .setValue(this.plugin.settings[embedSource.enabledKey])
                    .onChange((enabled) => __awaiter(this, void 0, void 0, function* () {
                    yield this.saveSettings({ [embedSource.enabledKey]: enabled });
                    this.toggleAdditionalSettings(embedSource, enabled);
                }));
            });
        });
        // Any additional settings for embed sources.
        containerEl.createEl("h3", { text: "Appearance" });
        this.plugin.embedSources.forEach((embedSource) => {
            if (embedSource.createAdditionalSettings) {
                containerEl.createEl("details", {}, (el) => {
                    const fragment = new DocumentFragment();
                    const summary = fragment.createEl("summary");
                    const title = fragment.createEl("h4", {
                        text: embedSource.name,
                    });
                    summary.appendChild(title);
                    el.appendChild(summary);
                    const settings = embedSource.createAdditionalSettings(el, this.plugin.settings, this.saveSettings.bind(this));
                    this.embedSettings[embedSource.constructor.name] = settings;
                    const enabled = this.plugin.settings[embedSource.enabledKey];
                    this.toggleAdditionalSettings(embedSource, enabled);
                });
            }
        });
        containerEl.createEl("h3", { text: "Advanced Settings" });
        new obsidian.Setting(containerEl)
            .setName("Show Embeds in Live Preview (beta)")
            .addToggle((toggle) => {
            toggle
                .setValue(this.plugin.settings.enableInLivePreview)
                .onChange((value) => __awaiter(this, void 0, void 0, function* () {
                yield this.saveSettings({ enableInLivePreview: value });
            }));
        });
        new obsidian.Setting(containerEl).setName("Center embeds").addToggle((toggle) => {
            toggle
                .setValue(this.plugin.settings.centerEmbeds)
                .onChange((value) => __awaiter(this, void 0, void 0, function* () {
                yield this.saveSettings({ centerEmbeds: value });
            }));
        });
        new obsidian.Setting(containerEl)
            .setName("Keep links in preview")
            .setDesc("Insert embeds above the link, instead of replacing the link in the preview.")
            .addToggle((toggle) => {
            toggle
                .setValue(this.plugin.settings.keepLinksInPreview)
                .onChange((value) => __awaiter(this, void 0, void 0, function* () {
                yield this.saveSettings({ keepLinksInPreview: value });
                placement.setDisabled(!this.plugin.settings.keepLinksInPreview);
            }));
        });
        const placement = new obsidian.Setting(containerEl)
            .setName("Place embeds")
            .setDesc('When "Keep links in preview" is enabled, choose whether to place the embed above or below the link.')
            .addDropdown((dropdown) => {
            dropdown
                .addOptions({ above: "Above link", below: "Below link" })
                .setValue(this.plugin.settings.embedPlacement)
                .onChange((value) => __awaiter(this, void 0, void 0, function* () {
                yield this.saveSettings({ embedPlacement: value });
            }));
        })
            .setDisabled(!this.plugin.settings.keepLinksInPreview);
        const fragment = new DocumentFragment();
        const div = fragment.createEl("div");
        const span = fragment.createEl("span");
        span.innerHTML =
            "Instead of automatically embedding all matching links, you must add <code>|embed</code> to the link text of each link you would like to turn into an embed. For example, <code>[Some description|embed](https://twitter.com/user/status/123)</code>";
        div.appendChild(span);
        fragment.appendChild(div);
        new obsidian.Setting(containerEl)
            .setName("Disable automatic embeds")
            .setDesc(fragment)
            .addToggle((toggle) => {
            toggle
                .setValue(this.plugin.settings.disableAutomaticEmbeds)
                .onChange((value) => __awaiter(this, void 0, void 0, function* () {
                yield this.saveSettings({ disableAutomaticEmbeds: value });
            }));
        });
    }
    saveSettings(updates) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.plugin.saveSettings(updates);
        });
    }
    // Disable/enable all additional settings when embed is disabled/enabled.
    toggleAdditionalSettings(embedSource, enabled) {
        const additionalSettings = this.embedSettings[embedSource.constructor.name];
        if (additionalSettings) {
            additionalSettings.forEach((setting) => {
                setting.setDisabled(!enabled);
            });
        }
    }
}

function buildSimpleEmbedsViewPlugin(plugin) {
    class EmbedWidget extends view.WidgetType {
        constructor(link, fullWidth, centered, keepLinks, embedSource, plugin) {
            super();
            this.link = link;
            this.fullWidth = fullWidth;
            this.centered = centered;
            this.keepLinks = keepLinks;
            this.embedSource = embedSource;
            this.plugin = plugin;
        }
        eq(other) {
            return (other.link === this.link &&
                other.fullWidth === this.fullWidth &&
                other.centered === this.centered &&
                other.keepLinks === this.keepLinks);
        }
        toDOM() {
            const embed = this.plugin.createEmbed(this.embedSource, this.link, this.fullWidth, this.centered, this.keepLinks);
            return embed;
        }
    }
    const viewPlugin = view.ViewPlugin.fromClass(class {
        constructor(view) {
            this.decorations = this.buildDecorations(view);
        }
        update(update) {
            if (update.docChanged ||
                update.viewportChanged ||
                update.selectionSet) {
                this.decorations = this.buildDecorations(update.view);
            }
        }
        destroy() { }
        buildDecorations(view) {
            var _a;
            let builder = new rangeset.RangeSetBuilder();
            let definitions = [];
            if (!plugin.isLivePreviewSupported) {
                return builder.finish();
            }
            let lines = [];
            if (view.state.doc.length > 0) {
                lines = Array.from({ length: view.state.doc.lines }, (_, i) => i + 1);
            }
            const currentSelections = [...view.state.selection.ranges];
            for (let n of lines) {
                const line = view.state.doc.line(n);
                const startOfLine = line.from;
                const endOfLine = line.to;
                let currentLine = false;
                currentSelections.forEach((r) => {
                    if (r.from >= startOfLine && r.to <= endOfLine) {
                        currentLine = true;
                        return;
                    }
                });
                const text = line.text;
                const mdLink = (_a = text
                    .match(/\[([^\[]+)\](\(.*\))/)) === null || _a === void 0 ? void 0 : _a.first().trim();
                if (!currentLine && mdLink) {
                    const start = line.text.indexOf(mdLink) + startOfLine;
                    const end = start + mdLink.length;
                    let embedSource = plugin.embedSources.find((source) => {
                        return (plugin.settings[source.enabledKey] &&
                            source.regex.test(line.text));
                    });
                    const isWithinText = this.isWithinText(text);
                    const replaceWithEmbed = plugin.shouldReplaceWithEmbed(mdLink, isWithinText);
                    const fullWidth = mdLink.includes("|fullwidth");
                    definitions.push(...this.hideOptions(mdLink, start));
                    if (embedSource && replaceWithEmbed) {
                        const link = line.text.match(embedSource.regex).first();
                        definitions.push(this.createWidget(link, fullWidth, embedSource, start, end));
                    }
                }
            }
            definitions.sort((a, b) => {
                return a.from - b.from;
            });
            definitions.forEach(({ from, to, deco }) => builder.add(from, to, deco));
            return builder.finish();
        }
        hideOptions(text, startOfLink) {
            const definitions = [];
            for (let option of ["|noembed", "|embed", "|fullwidth"]) {
                if (text.includes(option)) {
                    const from = text.indexOf(option) + startOfLink;
                    const to = from + option.length;
                    const deco = view.Decoration.replace({});
                    definitions.push({
                        from,
                        to,
                        deco,
                    });
                }
            }
            return definitions;
        }
        createWidget(link, fullWidth, embedSource, start, end) {
            const deco = view.Decoration.widget({
                widget: new EmbedWidget(link, fullWidth, plugin.settings.centerEmbeds, plugin.settings.keepLinksInPreview, embedSource, plugin),
            });
            if (plugin.settings.keepLinksInPreview) {
                if (plugin.settings.embedPlacement === "above") {
                    return {
                        from: start,
                        to: start,
                        deco,
                    };
                }
                else if (plugin.settings.embedPlacement === "below") {
                    return {
                        from: end,
                        to: end,
                        deco,
                    };
                }
            }
            else {
                return {
                    from: start,
                    to: end,
                    deco,
                };
            }
        }
        isWithinText(text) {
            const mdLink = text
                .match(/\[([^\[]+)\](\(.*\))/)[0].trim();
            const lineWithoutLink = text.replace(mdLink, "");
            const lineWithoutListMarkup = lineWithoutLink.replace(/-|\s\[|(\w|\s)\]/g, "")
                .trim();
            return (lineWithoutListMarkup === null || lineWithoutListMarkup === void 0 ? void 0 : lineWithoutListMarkup.length) > 0;
        }
    }, {
        decorations: (v) => v.decorations,
    });
    return viewPlugin;
}

class SimpleEmbedsPlugin extends obsidian.Plugin {
    constructor() {
        super(...arguments);
        this.embedSources = [
            new TwitterEmbed(),
            new YouTubeEmbed(),
            new InstagramEmbed(),
            new FlatIOEmbed(),
            new NoteflightEmbed(),
            new CodepenEmbed(),
            new GitHubGistEmbed(),
            new AppleMusicEmbed(),
            new ApplePodcastsEmbed(),
            new AppleTVEmbed(),
        ];
    }
    onload() {
        return __awaiter(this, void 0, void 0, function* () {
            console.log(`Loading ${this.manifest.name} v${this.manifest.version}`);
            yield this.loadSettings();
            this.addSettingTab(new SimpleEmbedPluginSettingTab(this.app, this));
            this.currentTheme = this._getCurrentTheme();
            const ext = buildSimpleEmbedsViewPlugin(this);
            this.registerEditorExtension(ext);
            this.processedMarkdown = obsidian.debounce(() => {
                this.embedSources.forEach((source) => {
                    var _a;
                    (_a = source.afterAllEmbeds) === null || _a === void 0 ? void 0 : _a.call(source);
                });
            }, 100);
            this.registerMarkdownPostProcessor((el, ctx) => {
                const anchors = el.querySelectorAll("a.external-link");
                anchors.forEach((anchor) => {
                    this._handleAnchor(anchor);
                });
                this.processedMarkdown();
            });
            this.registerEvent(this.app.workspace.on("css-change", () => {
                // Theme has potentially changed.
                const previousTheme = this.currentTheme;
                this.currentTheme = this._getCurrentTheme();
                if (previousTheme !== this.currentTheme) {
                    setTimeout(() => {
                        this.embedSources.forEach((embedSource) => {
                            var _a;
                            (_a = embedSource.updateTheme) === null || _a === void 0 ? void 0 : _a.call(embedSource, this.currentTheme, this.settings);
                        });
                    });
                }
            }));
        });
    }
    onunload() {
        console.log(`Unloading ${this.manifest.name}`);
        this.processedMarkdown = null;
    }
    loadSettings() {
        return __awaiter(this, void 0, void 0, function* () {
            this.settings = Object.assign({}, DEFAULT_SETTINGS, yield this.loadData());
        });
    }
    saveSettings(updates) {
        var _a, _b;
        return __awaiter(this, void 0, void 0, function* () {
            this.settings = Object.assign(Object.assign({}, this.settings), updates);
            yield this.saveData(this.settings);
            const view = this.app.workspace.getActiveViewOfType(obsidian.MarkdownView);
            (_a = view === null || view === void 0 ? void 0 : view.previewMode) === null || _a === void 0 ? void 0 : _a.rerender(true);
            (_b = view === null || view === void 0 ? void 0 : view.editor) === null || _b === void 0 ? void 0 : _b.transaction({
                selection: { from: { line: 0, ch: 0 }, to: { line: 0, ch: 0 } },
            });
        });
    }
    _getCurrentTheme() {
        return document.body.classList.contains("theme-dark") ? "dark" : "light";
    }
    _handleAnchor(a) {
        const isWithinText = Array.from(a.parentElement.childNodes)
            .filter((node) => {
            return node instanceof Text;
        })
            .some((text) => {
            const nbsp = new RegExp(String.fromCharCode(160), "g");
            const data = text.data.replace(nbsp, "").trim();
            return !!data;
        });
        const replaceWithEmbed = this.shouldReplaceWithEmbed(a.innerText, isWithinText);
        const fullWidth = a.innerText.includes("|fullwidth");
        // Remove any allowed properties:
        // |embed, |noembed, |fullwidth
        a.innerHTML = a.innerHTML.replace(/\|(?:embed|noembed|fullwidth)/g, "");
        if (!replaceWithEmbed) {
            return;
        }
        const href = a.getAttribute("href");
        // Try and find an enabled embed source that can handle the link.
        let embedSource = this.embedSources.find((source) => {
            return this.settings[source.enabledKey] && source.regex.test(href);
        });
        if (embedSource) {
            const embed = this.createEmbed(embedSource, href, fullWidth, this.settings.centerEmbeds, this.settings.keepLinksInPreview);
            this._insertEmbed(a, embed);
        }
    }
    shouldReplaceWithEmbed(text, isWithinText) {
        const disableAutomaticEmbeds = this.settings.disableAutomaticEmbeds;
        if (isWithinText && !disableAutomaticEmbeds) {
            return false;
        }
        return disableAutomaticEmbeds
            ? text.includes("|embed")
            : !text.includes("|noembed");
    }
    createEmbed(embedSource, link, fullWidth, centered, keepLinks) {
        const container = document.createElement("div");
        container.classList.add("embed-container");
        const embed = embedSource.createEmbed(link, container, this.settings, this.currentTheme);
        if (fullWidth) {
            embed.classList.add("full-width");
        }
        if (centered) {
            embed.classList.add("center");
        }
        if (!keepLinks) {
            embed.classList.add("hide-link");
        }
        return embed;
    }
    _insertEmbed(a, container) {
        const parent = a.parentElement;
        const keepLinksInPreview = this.settings.keepLinksInPreview;
        const placement = this.settings.embedPlacement;
        if (keepLinksInPreview && placement === "above") {
            parent.insertBefore(container, a);
        }
        else if (keepLinksInPreview && placement === "below") {
            container.insertAfter(a);
        }
        else {
            parent.replaceChild(container, a);
        }
    }
    get isLivePreviewSupported() {
        return (!!document.querySelector(".is-live-preview") &&
            this.settings.enableInLivePreview);
    }
}

module.exports = SimpleEmbedsPlugin;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
